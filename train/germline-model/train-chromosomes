#!/usr/bin/env bash

neutral_regions="${CONSTRAINT_TOOLS}/$(read-config trainGermlineModel neutralRegions)"
window_size="$(read-config trainGermlineModel windowSize)"
number_of_jobs="$(read-config trainGermlineModel numberOfJobs)"

# https://devhints.io/bash#miscellaneous
# put option-fetching before "set -o nounset" so that we can detect flags without arguments
while [[ "$1" =~ ^- ]]; do 
  case $1 in
    --genome ) shift; [[ ! $1 =~ ^- ]] && genome=$1;;
    --mutations ) shift; [[ ! $1 =~ ^- ]] && mutations=$1;;
    --number-chromosomes-min ) shift; [[ ! $1 =~ ^- ]] && number_chromosomes_min=$1;;
    --neutral-regions ) shift; [[ ! $1 =~ ^- ]] && neutral_regions=$1;;
    --window-size ) shift; [[ ! $1 =~ ^- ]] && window_size=$1;;
    --kmer-size ) shift; [[ ! $1 =~ ^- ]] && kmer_size=$1;;
    --model ) shift; [[ ! $1 =~ ^- ]] && model=$1;;
    --work ) shift; [[ ! $1 =~ ^- ]] && work=$1;;
    --number-of-jobs ) shift; [[ ! $1 =~ ^- ]] && number_of_jobs=$1;;
    *) error "$0: " "$1 is an invalid flag"; exit 1;;
  esac 
  shift
done

info "Training on neutral regions: " "${neutral_regions}\n"
info "Size of window used to compute singleton number: " "${window_size}"

set -o errexit
set -o pipefail
# set -o noclobber
set -o nounset
set -o xtrace

info "Remove neutral regions less than window_size ${window_size}bp in length"
info "Remove neutral regions on chromosomes X and Y"
neutral_regions_filtered="${work}/neutral-regions.filtered.bed"
zcat ${neutral_regions} \
  | awk --assign window_size=${window_size} '$3 - $2 > window_size' \
  | get-nonXY-chromosomes \
  > ${neutral_regions_filtered}

info "Number of slurm jobs (tasks): " "${number_of_jobs}"

number_of_neutral_regions=$(wc -l < ${neutral_regions_filtered})
info "Number of (filtered) neutral regions: " "${number_of_neutral_regions}"

if (( number_of_neutral_regions <= number_of_jobs )); then
  error "Number of neutral regions (${number_of_neutral_regions}) should be larger than number of jobs (${number_of_jobs})!"
  exit 1 
else
  number_of_neutral_regions_per_job=$((number_of_neutral_regions / number_of_jobs))
  info "Number of neutral regions per job (task): " "${number_of_neutral_regions_per_job}"
fi

number_of_neutral_regions_left_over=$((number_of_neutral_regions % number_of_jobs))
if (( number_of_neutral_regions_left_over > 0 )); then
  info "Number of neutral regions not used in training: " "${number_of_neutral_regions_left_over}"
fi

# each slurm task will store its output files in this temporary directory: 
tmpdir=$(mktemp --tmpdir=${work} --directory)
clean_up () {
  local exit_code="$1"
  if [[ "${exit_code}" == "0" ]]; then 
    info "Deleting tmp directory: " "${tmpdir}"
    rm --recursive --force "${tmpdir}"
  else 
    info "Received exit code ${exit_code}.."
    info "Not deleting tmp directory: " "${tmpdir}"
  fi 
}
# http://redsymbol.net/articles/bash-exit-traps/
# https://medium.com/@dirk.avery/the-bash-trap-trap-ce6083f36700
trap 'clean_up $?' EXIT

info "Submitting slurm job array..."

slurm_logs_directory="${work}/slurm_logs"
mkdir --parents ${slurm_logs_directory}

# sbatch man-page: 
# A maximum number of simultaneously running tasks from the job array may be
# specified using a "%" separator.  
# For example "--array=0-15%4" will limit the number of simultaneously running
# tasks from this job array to 4.
# We "wait" to ensure that all the jobs/tasks are finished before merging their results
sbatch \
  --wait \
  --array [1-${number_of_jobs}]%250 \
  --job-name "count-on-regions" \
  --output ${slurm_logs_directory}/count-on-regions.job-%A.task-%a.log \
  count-on-regions \
    --genome ${genome} \
    --mutations ${mutations} \
    --number-chromosomes-min ${number_chromosomes_min} \
    --kmer-size ${kmer_size} \
    --neutral-regions ${neutral_regions_filtered} \
    --tmpdir ${tmpdir} \
    --number-of-neutral-regions-per-job ${number_of_neutral_regions_per_job} \
    --window-size ${window_size}

expected_number_json_files=$(( ${number_of_jobs} * ${number_of_neutral_regions_per_job} ))
actual_number_json_files=$(/usr/bin/ls ${tmpdir} | wc -l)
info \
  "Number of neutral regions for which counts were obtained: " \
  "${actual_number_json_files}/${expected_number_json_files}"

info "Combining counts across neutral regions, and estimating probabilities..."
estimate-probabilities \
  --genome ${genome} \
  --mutations ${mutations} \
  --number-chromosomes-min ${number_chromosomes_min} \
  --kmer-size ${kmer_size} \
  --tmpdir ${tmpdir} \
  --window-size ${window_size} \
  --model ${model} \
  --neutral-regions ${neutral_regions_filtered}

