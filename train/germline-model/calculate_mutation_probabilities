#!/usr/bin/env python

# pysam API: 
# https://github.com/pysam-developers/pysam/blob/b82cbcae22c088e64fdb58f8acaf1e9773c7b088/pysam/libctabix.pyx
import pysam

import numpy as np
import json
import argparse 
import gzip 
import functools
import copy

from kmer import check_for_Ns, initialize_kmer_data, fetch_kmer_from_sequence, alternate_bases, middle_base, get_bases, contains_unspecified_bases
from colorize import print_json, print_string_as_info, print_string_as_info_dim, print_unbuffered, print_string_as_error
import color_traceback 
from fetch_SNVs import fetch_SNVs 
from pack_unpack import unpack, bed_to_sam_string
from timer import timer 

#%%
def parse_arguments(): 
  parser = argparse.ArgumentParser(description='')
  parser.add_argument('--final-model', type=str, dest='final_model', help='')
  parser.add_argument('--model-json-dir', type=str, dest='model_json_dir', help='')
  return parser.parse_args()
#%%

#%% 
def combine_json_models(model_json_dir): 
    ## Initialize concatenated dictionary
    combined_kmer_data={}
    
    ## Iterate through mutaiton probabilities obtained from each region
    for file in os.listdir(model_json_dir): 
        if file.endswith(".json"): 
            fh = open(model_json_dir + '/{}'.format(file))
            df = json.load(fh)
            
            ## Skip if the value of the kmer_data key is empty
            if df['kmer_data'] == None: 
                continue
            
            ## Proceed if kmer_data key is not empty
            else:
                ## Initialize the combined kmer data json 
                if len(combined_kmer_data) == 0: 
                    combined_kmer_data = df
                    combined_kmer_data['region'] = "all_chr"
                else: 
                    ## Iterate through each kmer in the df dataset
                    for kmer in df['kmer_data'].keys():
                        
                        ## Sum cohort_sequence_count
                        combined_kmer_data['kmer_data'][kmer]['cohort_sequence_count'] += \
                            df['kmer_data'][kmer]['cohort_sequence_count']
                                
                        ## Sum sequence_count
                        combined_kmer_data['kmer_data'][kmer]['sequence_count'] += \
                            df['kmer_data'][kmer]['sequence_count']
                        
                        ## Iterate through each alt allele for a given kmer --> sum alt_counts 
                        for alternate_base in df['kmer_data'][kmer]['ALT_counts'].keys():
                            combined_kmer_data['kmer_data'][kmer]['ALT_counts'][alternate_base] += \
                                df['kmer_data'][kmer]['ALT_counts'][alternate_base]
    return combined_kmer_data

#%%
def estimate_mutation_probabilities_core(kmer_data):
  print_string_as_info('Estimating mutation probabilities\n')
  
  if kmer_data is not None: 
      
      for kmer, data in kmer_data['kmer_data'].items():
        
        ## Initialize dictionary of mutation probabilities for individual alternate alleles
        probabilities = {}
        
        ## Initialize mutation probability for a given kmer across all alternate alleles
        mutation_probability = 0.0
    
        check_for_Ns(kmer) # sanity check 
        
        ## Check if the kmer was found in the region of interest
        if data['sequence_count'] == 0: 
          for base in get_bases(): probabilities[base] = None

        ## If the kmer is present in the region of interest --> proceed
        else: 
          for alternate_base in alternate_bases(kmer):
            # estimate probabilities for multinomial distribution: https://math.stackexchange.com/a/421838
            probabilities[alternate_base] = data['ALT_counts'][alternate_base]/(data['cohort_sequence_count'] *2) ## Multiply by two to account for both chromosomes
            
            ## Calculate mutation probability as an aggregate across all alternate bases
            mutation_probability += probabilities[alternate_base]
          
          ## Calculate probability of no mutation
          probabilities[middle_base(kmer)] = 1.0 - mutation_probability
          
        ## Combine mutation probability data for the kmer 
        data['estimated_mutation_probabilities'] = probabilities
        data['mutation_probability'] = mutation_probability
                
      return kmer_data
#%%

#%%
def calculate_mutation_probabilities(): 
  ## Load arguments
  args = parse_arguments()
  
  ## Combine model json files
  kmer_data = combine_json_models(args.model_json_dir)
  
  ## Calculate mutation probabilities from combined kmer data
  final_kmer_data = estimate_mutation_probabilities_core(kmer_data)
  
  model_path = args.final_model + '/model.json'
  with open(model_path, 'w') as fh:
    json.dump(final_kmer_data, fh, indent=2)
  print_string_as_info('Writing concatenated multinomial model to disk at: {}'.format(model_path))
#%%

#%%
if __name__ == '__main__':
  calculate_mutation_probabilities()  
#%%