#!/usr/bin/env python

import pandas as pd
import argparse

def split_chromosomes_into_intervals(chr_sizes_dict, args):
  chromosomes = []
  starts = []
  ends = []
  
  for chromosome in chr_sizes_dict.keys():
    chromosome_size = int(chr_sizes_dict[chromosome])
    interval_length = int(chromosome_size/int(args.number_of_intervals_per_chromosome))
    
    # initial interval for this chromosome
    chromosomes.append(chromosome)
    starts.append(1)
    ends.append(starts[-1] + interval_length)
    
    # remaining intervals for this chromosome
    while ends[-1] < chromosome_size: 
      chromosomes.append(chromosome)
      starts.append(ends[-1] + 1)
      ends.append(ends[-1] + interval_length + 1)

    # adjust the end breakpoint of the last interval for this chromosome 
    ends[-1] = chromosome_size
  
  pd.DataFrame({
    'chromosome': chromosomes, 
    'start': starts, 
    'end': ends
  }).to_csv(args.output, sep="\t", index=False)

def get_chr_sizes(chr_sizes_file): 
  chr_sizes_dict = {}
  
  with open(chr_sizes_file) as chr_sizes: 
    for line in chr_sizes: 
      (key, value) = line.split()
      chr_sizes_dict[str(key)] = int(value)
        
  return chr_sizes_dict

def parse_arguments():
  parser = argparse.ArgumentParser(description='')
  parser.add_argument('--chr-sizes-file', type=str, dest='chr_sizes_file', help='')
  parser.add_argument('--number-of-intervals-per-chromosome', type=str, dest='number_of_intervals_per_chromosome', help='')
  parser.add_argument('--output', type=str, help='')  
  return parser.parse_args()

def main(): 
  args = parse_arguments()
  chr_sizes_dict = get_chr_sizes(args.chr_sizes_file)
  split_chromosomes_into_intervals(chr_sizes_dict, args)

if __name__ == '__main__': 
  main() 
