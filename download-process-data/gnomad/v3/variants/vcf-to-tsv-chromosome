#!/usr/bin/env bash

# https://devhints.io/bash#miscellaneous
# put option-fetching before "set -o nounset" so that we can detect flags without arguments
while [[ "$1" =~ ^- ]]; do
  case $1 in
    --chromosome ) shift; [[ ! $1 =~ ^- ]] && chromosome=$1;;
    --number-of-intervals-per-job ) shift; [[ ! $1 =~ ^- ]] && number_of_intervals_per_job=$1;;
    --number-of-jobs ) shift; [[ ! $1 =~ ^- ]] && number_of_jobs=$1;;
    --number-of-intervals-per-chromosome ) shift; [[ ! $1 =~ ^- ]] && number_of_intervals_per_chromosome=$1;;
    *) error "$0: $1 is an invalid flag"; exit 1;;
  esac
  shift
done

set -o errexit
set -o pipefail
# set -o noclobber
set -o xtrace
set -o nounset 

#######################################

info "extract vep labels from vcf for this particular chromosome ..."

variants_directory="${CONSTRAINT_TOOLS_DATA}/gnomad/v3/variants" 
variants="${variants_directory}/gnomad_v3_${chromosome}"
vep_keys="${variants_directory}/gnomad_v3_${chromosome}.vep-keys.txt"

bcftools view -h ${variants}.vcf.gz \
  | grep "ID=vep" \
  | tr ": " "\n" \
  | grep -i Allele \
  | sed 's/">//' \
  | tr "|" "\n" \
  > ${vep_keys}

#######################################

info "get intervals for this specific chromosome ..."

intervals="${CONSTRAINT_TOOLS_DATA}/map-reduce-intervals/intervals.bed"
intervals_on_chromosome="${CONSTRAINT_TOOLS_DATA}/map-reduce-intervals/intervals.${chromosome}.bed"

cat ${intervals} \
  | tail -n +2 \
  | grep -w ${chromosome} \
  > ${intervals_on_chromosome}

# sanity check
if [[ ${number_of_intervals_per_chromosome} -ne $(wc -l < ${intervals_on_chromosome}) ]]; then 
  error "number_of_intervals_per_chromosome != $(wc -l < ${intervals_on_chromosome})"
  exit 1 
fi 

#######################################

# TODO: delete 
number_of_jobs="10"

info "Submitting slurm job array with ${number_of_jobs} jobs (tasks) and ${number_of_intervals_per_job} intervals per job..."

# each slurm task will store its output files in this temporary directory: 
tmpdir=$(mktemp --tmpdir=${variants_directory} --directory)
clean_up () {
  rm --recursive --force "${tmpdir}"
}
# TODO: uncomment once debugging is complete:  
# trap clean_up EXIT

success_signature="TSV FILE READY TO MERGE"

# sbatch man-page: 
# A maximum number of simultaneously running tasks from the job array may be
# specified using a "%" separator.  
# For example "--array=0-15%4" will limit the number of simultaneously running
# tasks from this job array to 4.
# We "wait" for two reasons: 
#   1. to ensure that all the jobs/tasks are finished before merging their results
#   2. because the number of jobs per chromosome is already at the allowable limit for job submissions on slurm
sbatch \
  --wait \
  --array [1-${number_of_jobs}]%250 \
  --job-name "vcf-to-tsv-${chromosome}" \
  --output ${tmpdir}/gnomad_v3_${chromosome}.vcf-to-tsv.job-%A.task-%a.log \
  vcf-to-tsv-intervals \
    --vcf ${variants}.vcf.gz \
    --vep-keys ${vep_keys} \
    --intervals-on-chromosome ${intervals_on_chromosome} \
    --number-of-intervals-per-job ${number_of_intervals_per_job} \
    --tmpdir ${tmpdir} \
    --success-signature "${success_signature}"

#######################################

number_of_successful_jobs="0"
for log_file in ${tmpdir}/*.log; do 
  last_line="$(tail --lines=1 ${log_file})"
  if [[ "${last_line}" == "${success_signature}" ]]; then
    ((number_of_successful_jobs = number_of_successful_jobs + 1))
  fi
done 

if [[ ${number_of_successful_jobs} -ne ${number_of_jobs} ]]; then
	info "Some jobs failed... Did not merge..." 
	exit 1
fi 

info "All jobs to convert ${chromosome} variants from vcf to tsv format were successful..."

set +o errexit
random_tsv_file=$(ls ${tmpdir}/*.tsv | head -1)
set -o errexit
head -1 ${random_tsv_file} > ${variants}.tsv 

info "Merging tsv files into a single tsv file for ${chromosome}..."
tail -n +2 --quiet ${tmpdir}/*.tsv >> ${variants}.tsv

info "Sorting and block compressing tsv file for ${chromosome}..."
set +o errexit
(
  head -1 ${variants}.tsv
  tail -n +2 ${variants}.tsv | sort --version-sort -k1,1 -k2,2n -k3,3n
) |
  bgzip > ${variants}.sorted.tsv.gz
set -o errexit

info "Indexing tsv file for ${chromosome}..."
# http://www.htslib.org/doc/tabix.html
tabix \
    --skip-lines 1 \
    --sequence 1 \
    --begin 2 \
    --end 3 \
    --force \
  ${variants}.sorted.tsv.gz

rm --force ${variants}.tsv

