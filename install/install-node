#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
set -o xtrace

# This sets the path to modern versions of npm AND node.
# No need to export PATH since it is already in the environment: 
# `printenv | grep -w PATH` returns non-zero output 
PATH="${CONSTRAINT_TOOLS}/node/bin:$PATH" 

report_versions () { 
  info "npm version is: $(npm --version)"
  info "node version is: $(node --version)"
}

if [[ -d ${CONSTRAINT_TOOLS}/node/bin ]]; then
  report_versions 
  info "skipping installation of npm and node"
  exit 0 
fi 

kernel=$(uname --kernel-name)
machine=$(uname --machine)

info "downloading node (and npm)"

rm -rf "${CONSTRAINT_TOOLS}/node"
node_version="v16.4.2"

if [[ ${machine} == 'x86_64' ]]; then
  if [[ ${kernel} == 'Darwin'* ]]; then
    curl --remote-name "https://nodejs.org/dist/${node_version}/node-${node_version}-darwin-x64.tar.gz"
    tar -xf "node-${node_version}-darwin-x64.tar.gz"
		rm "node-${node_version}-darwin-x64.tar.gz"
		mv "node-${node_version}-darwin-x64" "${CONSTRAINT_TOOLS}/node"
  elif [[ ${kernel} == 'Linux'* ]]; then
    curl --remote-name "https://nodejs.org/dist/${node_version}/node-${node_version}-linux-x64.tar.xz"
    tar -xf "node-${node_version}-linux-x64.tar.xz"
    rm "node-${node_version}-linux-x64.tar.xz"
    mv "node-${node_version}-linux-x64" "${CONSTRAINT_TOOLS}/node"
  else
    echo 'neither Darwin nor Linux'
    exit 1
  fi
else
  echo 'not x86_64'
  exit 1
fi

report_versions




